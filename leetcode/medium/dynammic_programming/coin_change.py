# Pattern          = 
# Time Complexity  = O(n)
# Space Complexity = O(1)
"""
Input1 = Int List
Input2 = Integer
Return type = Int List
"""

def coinChange(coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        # dp is amount + 1 in a list x amount + 1 times
        # ex: For amount = 11
        # [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
        dp = [amount + 1] * (amount + 1)
        print(dp)
        dp[0] = 0
        print(dp)
        
        for amt in range(1,amount + 1):
            for coin in coins:
                if amt - coin >= 0:
                    dp[amt] = min(dp[amt],dp[amt - coin] + 1)
                    print(dp)
        return dp[amount] if dp[amount] < amount + 1 else -1


amount = 11
coins = [1,2,5]
print(coinChange(amount,coins))

'''
Output of amount = 11 and coins = [1,2,5]
========
[12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
[0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]

[0, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]
[0, 1, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12]
[0, 1, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 12, 12, 12, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 12, 12, 12, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 3, 12, 12, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 12, 12, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 3, 12, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 3, 12, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 12, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 12, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 3, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 12, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 12, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 4, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 3, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 3, 12, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 3, 4, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 3, 4, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 3, 2, 12]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 3, 2, 3]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 3, 2, 3]
[0, 1, 1, 2, 2, 1, 2, 2, 3, 3, 2, 3]

'''